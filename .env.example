# Stream Analyser - Configuration Example
# Copy this file to .env and add your API keys

# =============================================================================
# API KEYS (REQUIRED)
# =============================================================================

# OpenAI API key for Whisper microphone transcription
# Get from: https://platform.openai.com/api-keys
OPENAI_API_KEY=your_openai_api_key_here

# Google Gemini API key for AI sentiment analysis
# Get from: https://makersuite.google.com/app/apikey
GEMINI_API_KEY=your_gemini_api_key_here

# =============================================================================
# AI ANALYZER CONFIGURATION
# =============================================================================

# AI model for analysis.
# Default is set to a fast and cost-effective model.
#
# Available Models:
# - groq:llama-3.3-70b-versatile
# - google-gla:gemini-2.0-flash
# - google-gla:gemini-2.5-pro-preview-05-06
# - openai:gpt-4o
MODEL=google-gla:gemini-2.0-flash

# Input file with transcribed text
TRANSCRIPTION_INPUT_FILE=microphone_transcription.txt

# Output file for AI analysis results
ANALYSIS_OUTPUT_FILE=analysis_results.jsonl

# File with market expectations for AI calibration
EXPECTATIONS_FILE=expectations.txt

# Analysis interval in seconds (how often to analyze)
CHECK_INTERVAL=10.0

# Analysis mode: fulltext (entire content) or incremental (new lines only)
ANALYSIS_MODE=fulltext

# =============================================================================
# STREAM TRANSCRIBER CONFIGURATION (Optional - only needed for stream mode)
# =============================================================================

# YouTube Live Stream URL (only if using stream_transcriber.py instead of mic_to_text.py)
YOUTUBE_STREAM_URL=https://www.youtube.com/watch?v=YOUR_STREAM_ID

# Output file for stream transcription (change TRANSCRIPTION_INPUT_FILE to this if using streams)
TRANSCRIPTION_OUTPUT_FILE=transcribed_text.txt

# Language for stream transcription
TRANSCRIPTION_LANGUAGE=en-US

# =============================================================================
# TRADING CONFIGURATION (Optional - DISABLED by default for safety)
# =============================================================================

# Enable/disable automated trading (CAUTION: set to true only for live trading)
TRADING_ENABLED=false

# Bitfinex API credentials (required if trading enabled)
# Get from: https://setting.bitfinex.com/api
BITFINEX_API_KEY=your_bitfinex_api_key_here
BITFINEX_API_SECRET=your_bitfinex_api_secret_here

# Trading symbol (Bitcoin perpetual futures)
TRADE_SYMBOL=tBTCF0:USTF0

# Confidence threshold for trading (0.8 = 80% confidence minimum)
TRADING_CONFIDENCE_THRESHOLD=0.8

# Trade amounts in Bitcoin (positive = long/buy, negative = short/sell)
HAWKISH_BTC_AMOUNT=-0.001    # Short 0.001 BTC on hawkish signals (bearish for Bitcoin)
DOVISH_BTC_AMOUNT=0.001      # Long 0.001 BTC on dovish signals (bullish for Bitcoin)

# Trading leverage (multiplier for position size)
TRADE_LEVERAGE=3

# Limit order offset (0.001 = 0.1% from current price)
TRADE_LIMIT_OFFSET=0.001

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================
#
# BASIC SETUP:
# 1. Copy this file: cp .env.example .env
# 2. Add your OPENAI_API_KEY and GEMINI_API_KEY
# 3. Run: python mic_to_text.py (in one terminal)
# 4. Run: python ai_analyzer.py (in another terminal)
#
# FOR TRADING (Advanced):
# 5. Add BITFINEX_API_KEY and BITFINEX_API_SECRET
# 6. Set TRADING_ENABLED=true
# 7. Adjust trade amounts and leverage as desired
#
# MONITORING:
# - Analysis: tail -f analysis_results.jsonl | jq .
# - Trading: tail -f trade_results.jsonl | jq .
#
# =============================================================================